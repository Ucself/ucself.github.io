<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ucself</title>
    <description>嗨，我是ucself，一名大前端开发工程师。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 27 Mar 2019 18:56:21 +0800</pubDate>
    <lastBuildDate>Wed, 27 Mar 2019 18:56:21 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>2018年终总结，2019年初计划</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近一段时间比较懵逼（以下的解决状态），感觉又一次浑浑噩噩的状态来临，似曾相识的感觉，想必许多人也有这样的状态过。我发誓要好好利用，不能再这样浪费时间。借此机会划写一篇“2018年终总结，2019年初计划”，来寻找原因，解决状态，制定计划。&lt;/p&gt;

&lt;h4 id=&quot;寻找原因&quot;&gt;寻找原因&lt;/h4&gt;
&lt;p&gt;1、目标计划
说到计划，其实每个人都计划过，我现在还能翻开刚毕业时候写的人生规划列表。包含了硬实力（第一年初级工程师，第二年中级工程…）和软实力（第一年，第二年…），现在想起来都想笑，哈哈。算了不说无用的，来分析一下没有实施的原因：
a. 目标太大而远：打一个比方，相当于“5年后我要当上CEO，迎娶白富美”，这目标太大，都不知道CEO需要哪些能力，自己有什么能力，这个5年的时间也太长了吧，说不一定已经嗝屁了呢，也不是说有长目标不好，就是感觉目前对我来说没太大用处。
b. 目标不够明确：对于目标应该达到什么明确结果，而不是虚拟的
c. 没有细化成小目标：在指定目标的时候并不知道执行过程中需要做什么，没有细分
d. 目标没有执行约束：没有执行约束，想干嘛就干嘛，拖着就拖着，然后就拖忘掉了，最后完全没达到自我的预期&lt;/p&gt;

&lt;p&gt;2、知识体系
对于知识体系，我曾经也搭建过，记录过，比如使用《有道笔记》记录学习swift 语言的各个章节内容和自己写的demo；使用github 的 star/fork 记录优秀的框架；使用百度网盘保存资源等等。但是知识体系感觉还是很散落。
打一个比方，2018年底2019年初互联网寒冬，互联网公司很多都在裁员（我们公司也在裁员，这次没有裁到我），领导们都叫我们充电。我在设想，如果裁员裁到我，我能否迅速的寻找下一家公司的时候汇集我知识体系，达到我最好的状态，显然不行。领导们叫我们充电，只是说明一种信号，到底冲什么呢，我觉得是搭建自我良好的知识体系。&lt;/p&gt;

&lt;p&gt;3、自制力，约束
说到没有自制力和约束：那就是在个人空档期的时候，自己未找到充电的方式，不充实。
第一个原因：没有建立良性的目标任务，任务的严重程度和时间紧迫度，比如在工作，任务都完成的情况，空闲时间刷刷抖音，看看新闻，聊聊微信，半天就过去了，在玩玩游戏，一天就过去了。第二个原因：建立在环境下，学习工作的气氛。&lt;/p&gt;

&lt;h4 id=&quot;解决状态&quot;&gt;解决状态&lt;/h4&gt;

&lt;p&gt;状态首先捋一捋之前什么状态需要解决：
1、忙碌期：任务太多的时候，非常忙碌，加班，这时候充实，严重的时候会反感。
2、空档期：在工作生活空档期，比较闲，有些时候看看新闻资料，时间过得超慢，感觉在浪费时间，不想这样特别难受。
3、知识沉淀：在空档期，或者忙碌期都没有知识体系沉淀，到了关键回想整理的时候全部靠脑子回想收之甚少，难受。&lt;/p&gt;

&lt;p&gt;好吧，现在来解决解决。
理清楚了上面“寻找原因”，这三个状态其实很好解决：
1、首先建立“时间任务管理”来指定小目标：采用象限时间任务管理，当脑子里凸显出我想做什么\我应该做什么的时候（任务指派我），就按照重要性与紧迫性写入任务。按照任务管理做就行了
2、在自己的“时间任务管理”的小目标中，觉得可以作为知识体系建立的使用github博客，进行分类归档
3、在“自制力/约束”方面：紧迫性的“时间任务管理”已有；工作提升气氛方面，使用正确使用坐姿工作和娱乐，不要给身体一种懒散的状态。&lt;/p&gt;

&lt;h4 id=&quot;制定计划&quot;&gt;制定计划&lt;/h4&gt;
&lt;p&gt;好了，对自己分析那么多，制定点改善计划吧。
1、使用笔记 “象限时间任务管理”。曾经使用过任务管理软件，道理时间就会提醒，让自己难受，任务就是在做事的时候去根据优先级选择做，不能让自己难受。
2、使用github静态网站，作为知识体系记录。
3、家里有自己工作，任务环境。&lt;/p&gt;

&lt;p&gt;临时笔记，数据记录使用“有道笔记”；自我文件资源使用在“百度网盘”；关于IT项目资源使用“github”；各种浏览书签使用“safari”；常用软件（mac，windows）记录待发现&lt;/p&gt;

&lt;h2 id=&quot;2018总结&quot;&gt;2018总结&lt;/h2&gt;
&lt;p&gt;当写入到2018总结一栏的时候停顿了很久，没有记录全靠脑子回想难受，明年应该就不会了。
首先列出几个2018的大节点吧：
1、App 发布15次版本
2、在雷神指导下搭建jenkins + fastlane + pgy App打包自动构建
3、在雷神指导下完善工具链App 研发并投入研发部使用
4、小试RN 接入App研发，同一套代码三端运行
5、新增加研发功能菜单，方便与H5端同事，测试同事，native同事联调
6、新使用第三方SDK
7、初步了解进入前端开发rect体系并做了小型研发类型项目
8、在软实力方面在关注，软实力提示展示毕竟与自己能力、视野有关
9、在业务与自定义任务工作中，对技术能力，技术使用广度都有提升&lt;br /&gt;
在找找自己的不足吧：
1、这些大节点能回想起，但是做完之后没有归档到相应的知识体系
2、如何再一次做这些功能，可能回去翻阅旧代码和文档(缺乏总结产物)&lt;/p&gt;

&lt;h2 id=&quot;2019计划&quot;&gt;2019计划&lt;/h2&gt;
&lt;p&gt;在2019来临之际根据前言，2018总结，指定些应该自我改变的目标与计划：
1、使用“象限时间任务管理”，管理自我目标，任务（实践中不行，再换）(明确目标)
2、对已经完成过得任务目标，进行知识体系构建，记录在github静态站中(明确目标)
3、深入Native 技术能力（毕竟是吃饭的家伙），熟练前端React体系研发能力(明确目标)
4、自制力提升（改变在任务目标，环境方式提升）(虚拟目标)
5、软实力提升（学习周围人和能力）(虚拟目标)&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93-2019%E5%B9%B4%E5%88%9D%E8%AE%A1%E5%88%92/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93-2019%E5%B9%B4%E5%88%9D%E8%AE%A1%E5%88%92/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>iOS UIViewController的self.view布局位置问题。</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;在平时的开发中，打开布局查看器老是遇见self.view有的控制器顶在了navagationbar上面，有的控制器顶在了navagationbar下面；一直很纠结这个问题，最近专门研究一下，并记录下来。&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-01b78db0d3ce2ea7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里不做详细介绍了，如果不愿意详细看下面文章就看我总结吧，很详细的介绍在：https://www.jianshu.com/p/6925ce1b9e34&lt;/p&gt;

&lt;p&gt;这里做一个总结：
1、影响到self.view是顶入顶部（有navagationbar）或者底部（有tabbar）有三个属性可以影响到：
A、isTranslucent（所属UINavigationBar），
B、edgesForExtendedLayout（所属UIViewController），
C、extendedLayoutIncludesOpaqueBars（所属UIViewController）
2、isTranslucent 与 edgesForExtendedLayout 相互影响是否顶入顶部或底部，
举例：
（isTranslucent 为true 和 edgesForExtendedLayout 为all ）就self.view顶入顶部和底部，（
A、isTranslucent 为false 和 edgesForExtendedLayout 为all ）就self.view不顶入顶部和底部，
B、isTranslucent 为true 和 edgesForExtendedLayout 为.top ）就self.view顶入顶部和不顶入底部，
其他的属性就自己揣测吧。
3、extendedLayoutIncludesOpaqueBars  = true 可忽略 isTranslucent 对导航栏的影响（可以理解为：在其他默认设置情况先设置extendedLayoutIncludesOpaqueBars  = true， self.view顶入顶部和底部）；&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/iOS-UIViewController%E7%9A%84self.view%E5%B8%83%E5%B1%80%E4%BD%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/iOS-UIViewController%E7%9A%84self.view%E5%B8%83%E5%B1%80%E4%BD%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>swift 工程 TARGETS与预定义宏</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;最近公司项目接入妙健康framework 的时候，framework不支持模拟器；如果接入进去整个工程都不支持模拟器了，这怎么得了，所以想了一个办法。
想到的办法与实践是：给整个iOS添加TARGETS，模拟器使用的Targets工程 不接入妙健康framework，真机运行的Targets工程接入妙健康framework；其他项目文件两个Targets 工程一起使用；共同使用的文件再根据各自的Targets 工程预定义宏方式进行判断是否写秒健康代码，如图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-a0e8899d3ad832ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###具体操作步骤：
####1、通过如图方式复制一份现有工程，然后更名为：DoctorHealthSimulator
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-921754d3e32f0e3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;
结果：
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-f4cea8f9629bf4bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;####2、把不需要接入的framework 或者文件的Target Membership 的DoctorHealthSimulator为未选中，如果在没有写任何接入代码的时候，就可以用模拟器编译DoctorHealthSimulator 就不会报错了
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-dd8cb02f96898004.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;
####3、这时候真机运行的DoctorHealth要写接入代码，而模拟器运行DoctorHealthSimulator不需要写接入代码，但是他们都引用了同一个文件，像下面这样干，
a、如果是swift工程项目，选中DoctorHealth -&amp;gt;build Settings -&amp;gt; other swift flags 加入如图所示配置（最后一个）
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-5d8be25bee330e4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DoctorHealthSimulator就不用配置任何东西
公用文件就像如图写：
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-eb6f2452823f12bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;b、如果是OC项目工程，选中DoctorHealth -&amp;gt;build Settings -&amp;gt; preprocessor macros 加入如图所示配置（最后一个）
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-1e73ad7d66bbc668.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;
代码和swift工程方式写，配置完成
c、如果是混合编写的工程，OC与swift代码都需要用到，则两个地方都要配置预编译宏&lt;/p&gt;

&lt;p&gt;这样就完成了所需的配置。只是模拟器运行DoctorHealthSimulator工程，真机运行DoctorHealth工程，就达到了需要的效果，模拟器只是没有妙健康的功能（本来模拟器就不支持蓝牙等功能）&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/swift-%E5%B7%A5%E7%A8%8B-TARGETS%E4%B8%8E%E9%A2%84%E5%AE%9A%E4%B9%89%E5%AE%8F/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/swift-%E5%B7%A5%E7%A8%8B-TARGETS%E4%B8%8E%E9%A2%84%E5%AE%9A%E4%B9%89%E5%AE%8F/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>iOS框架如何发布到CocoaPods</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;经常使用别人的封装库或者项目，在项目开发中自己也有封装，即使不能给别人广泛使用，也可以自己在多项目中pod方式使用自己封装的代码
前提：mac上已经装好了pod,git&lt;/p&gt;
&lt;h3 id=&quot;一创建自己库添加cocoapods支持&quot;&gt;一、创建自己库添加Cocoapods支持&lt;/h3&gt;
&lt;h4 id=&quot;1基于pod自动创建项目&quot;&gt;1、基于pod自动创建项目&lt;/h4&gt;
&lt;p&gt;在终端输入&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod lib create JGCache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;提示对应的询问命令&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cloning `https://github.com/CocoaPods/pod-template.git` into `JGCache`.
Configuring JGCache template.

------------------------------

To get you started we need to ask a few questions, this should only take a minute.

If this is your first time we recommend running through with the guide: 
 - http://guides.cocoapods.org/making/using-pod-lib-create.html
 ( hold cmd and double click links to open in a browser. )


What language do you want to use?? [ Swift / ObjC ]
 &amp;gt; Swift

Would you like to include a demo application with your library? [ Yes / No ]
 &amp;gt; Yes

Which testing frameworks will you use? [ Quick / None ]
 &amp;gt; None

Would you like to do view based testing? [ Yes / No ]
 &amp;gt; No
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;项目创建成功，并编译成功&lt;/p&gt;
&lt;h4 id=&quot;2接下来在httpsgithubcom官网自己的账号下创建一个仓库jgcache这里不是重点不用介绍了&quot;&gt;2、接下来在https://github.com/官网自己的账号下创建一个仓库JGCache（这里不是重点，不用介绍了）&lt;/h4&gt;
&lt;h4 id=&quot;3将pod命令自动创建的项目上传到github-jgcache项目中这里不是重点不用介绍了&quot;&gt;3、将pod命令自动创建的项目上传到github JGCache项目中，（这里不是重点，不用介绍了）&lt;/h4&gt;
&lt;h4 id=&quot;4给仓库jgcache-主分支master-创建一个tag-010-这里不是重点不用介绍了&quot;&gt;4、给仓库JGCache 主分支master 创建一个tag 0.1.0 （这里不是重点，不用介绍了）&lt;/h4&gt;
&lt;h4 id=&quot;5打开项目中的jgcachepodspec文件可以看到默认设置&quot;&gt;5、打开项目中的JGCache.podspec文件可以看到默认设置&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#
# Be sure to run `pod lib lint JGCache.podspec' to ensure this is a
# valid spec before submitting.
#
# Any lines starting with a # are optional, but their use is encouraged
# To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html
#

Pod::Spec.new do |s|
  s.name             = 'JGCache'
  s.version          = '0.1.0'
  s.summary          = 'A short description of JGCache.'

# This description is used to generate tags and improve search results.
#   * Think: What does it do? Why did you write it? What is the focus?
#   * Try to keep it short, snappy and to the point.
#   * Write the description between the DESC delimiters below.
#   * Finally, don't worry about the indent, CocoaPods strips it!

  s.description      = &amp;lt;&amp;lt;-DESC
TODO: Add long description of the pod here.
                       DESC

  s.homepage         = 'https://github.com/lbj147123@163.com/JGCache'
  # s.screenshots     = 'www.example.com/screenshots_1', 'www.example.com/screenshots_2'
  s.license          = { :type =&amp;gt; 'MIT', :file =&amp;gt; 'LICENSE' }
  s.author           = { 'lbj147123@163.com' =&amp;gt; 'lbj147123@163.com' }
  s.source           = { :git =&amp;gt; 'https://github.com/lbj147123@163.com/JGCache.git', :tag =&amp;gt; s.version.to_s }
  # s.social_media_url = 'https://twitter.com/&amp;lt;TWITTER_USERNAME&amp;gt;'

  s.ios.deployment_target = '8.0'

  s.source_files = 'JGCache/Classes/**/*'
  
  # s.resource_bundles = {
  #   'JGCache' =&amp;gt; ['JGCache/Assets/*.png']
  # }

  # s.public_header_files = 'Pod/Classes/**/*.h'
  # s.frameworks = 'UIKit', 'MapKit'
  # s.dependency 'AFNetworking', '~&amp;gt; 2.3'
end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;6、修改项目中的JGCache.podspec文件的设置为（这里就不介绍每一项的意思了）&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Pod::Spec.new do |s|
  s.name             = 'JGCache'
  s.version          = '0.1.0'
  s.summary          = 'this is description'

# This description is used to generate tags and improve search results.
#   * Think: What does it do? Why did you write it? What is the focus?
#   * Try to keep it short, snappy and to the point.
#   * Write the description between the DESC delimiters below.
#   * Finally, don't worry about the indent, CocoaPods strips it!

  s.description      = &amp;lt;&amp;lt;-DESC
TODO: this is description
                       DESC

  s.homepage         = 'https://github.com/Ucself/JGCache'
  # s.screenshots     = 'www.example.com/screenshots_1', 'www.example.com/screenshots_2'
  s.license          = { :type =&amp;gt; 'MIT', :file =&amp;gt; 'LICENSE' }
  s.author           = { '李保君' =&amp;gt; 'lbj147123@163.com' }
  s.source           = { :git =&amp;gt; 'https://github.com/Ucself/JGCache.git', :tag =&amp;gt; s.version.to_s }
  # s.social_media_url = 'https://twitter.com/&amp;lt;TWITTER_USERNAME&amp;gt;'

  s.ios.deployment_target = '8.0'

  s.source_files = 'JGCache/Classes/**/*'
  
  # s.resource_bundles = {
  #   'JGCache' =&amp;gt; ['JGCache/Assets/*.png']
  # }

  # s.public_header_files = 'Pod/Classes/**/*.h'
  # s.frameworks = 'UIKit', 'MapKit'
  s.dependency 'ObjectMapper', '~&amp;gt; 3.0.0'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;7检测填写的podspec是否有错误cd进入jgcache文件目录&quot;&gt;7、检测填写的podspec是否有错误，cd进入JGCache文件目录&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod spec lint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;8测试本地导入的文件是否报错cd-进入项目example文件路径导入依赖的第三方库&quot;&gt;8、测试本地导入的文件是否报错。cd 进入项目Example文件路径,导入依赖的第三方库&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod install 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;9上传的cocopods管理&quot;&gt;9、上传的cocopods管理&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod trunk push JGCache.podspec --allow-warnings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;二更新自己库添加cocoapods支持&quot;&gt;二、更新自己库添加Cocoapods支持&lt;/h3&gt;
&lt;h4 id=&quot;1jgcachepodspec-文件中你需要更改的项目更改主要更改版本如100&quot;&gt;1、JGCache.podspec 文件中你需要更改的项目更改（主要更改版本如：1.0.0）&lt;/h4&gt;
&lt;h4 id=&quot;2在啊gitbug对你的工程添加标签如100&quot;&gt;2、在啊gitbug对你的工程添加标签如1.0.0&lt;/h4&gt;
&lt;h4 id=&quot;3上传工程工程代码&quot;&gt;3、上传工程工程代码&lt;/h4&gt;
&lt;h4 id=&quot;4再次执行&quot;&gt;4、再次执行&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod trunk push JGCache.podspec --allow-warnings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 01 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/11/iOS%E6%A1%86%E6%9E%B6%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E5%88%B0CocoaPods/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/iOS%E6%A1%86%E6%9E%B6%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E5%88%B0CocoaPods/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>iOS 中Frameworks，Pods ，-Bridging-Header.h桥接，import之间的理解</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;在项目开发中，遇到一个问题，由于Frameworks，Pods，-Bridging-Header.h，import的使用不当会造成控制台日志报错问题&lt;/p&gt;
&lt;h2 id=&quot;frameworks&quot;&gt;Frameworks&lt;/h2&gt;
&lt;p&gt;Frameworks 顾名思义就是框架，是第三方打包完成看不到源码，可以直接使用的
在项目中引用方式&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OC  引用某一个文件，Frameworks一般会提供一个h文件引用全部其他文件
#import &amp;lt;JLRoutes/JLRoutes.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swift  引用一个包，相当于引用了Frameworks中的所有文件
import JLRoutes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;pods-方式&quot;&gt;Pods 方式&lt;/h2&gt;
&lt;p&gt;Pods 在iOS中对封装的源码进行管理，可以视频pod方式导入项目中，相当于能看见源代码也能修改源代码的 Frameworks，有的不会生成Frameworks类似的包如：GrowingIO（因为在swift中import GrowingIO失败）
在项目中引用方式&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OC  引用某一个文件，Pods一般会提供一个h文件引用全部其他文件
#import &amp;lt;JLRoutes/JLRoutes.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swift  引用一个包，相当于引用了Pods中的所有文件
import JLRoutes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;-bridging-headerh-桥接文件&quot;&gt;-Bridging-Header.h 桥接文件&lt;/h2&gt;
&lt;p&gt;桥接文件，即是OC的文件通过桥接到Swift能调用
1、在swift使用中我们可以对包（Frameworks/Pods）进行桥接，如&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;JLRoutes/JLRoutes.h&amp;gt;
#import &amp;lt;GrowingIO/Growing.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2、绝不能使用&lt;/p&gt;

&lt;p&gt;&lt;del&gt;#import “JLRoutes.h”&lt;/del&gt;
&lt;del&gt;#import “Growing.h”&lt;/del&gt;
虽然不会错报，会出现控制台打印变量问题
3、项目中添加的OC代码就得使用&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &quot;JLRoutes.h&quot;
#import &quot;Growing.h&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;import导入方式&quot;&gt;import导入方式&lt;/h2&gt;
&lt;p&gt;如果是单个文件就需要导入，直接使用；如果是包&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import AFNetworking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 21 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/iOS-%E4%B8%ADFrameworks-Pods-Bridging-Header.h%E6%A1%A5%E6%8E%A5-import%E4%B9%8B%E9%97%B4%E7%9A%84%E7%90%86%E8%A7%A3/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/iOS-%E4%B8%ADFrameworks-Pods-Bridging-Header.h%E6%A1%A5%E6%8E%A5-import%E4%B9%8B%E9%97%B4%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>iOS NSPredicate（谓词）语法</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;       在项目开发中遇见本地化搜索不是很高，当有本地化搜索的需求时候对 NSPredicate 的语法都去网上搜索，然而苹果官方也没有专门介绍语法，借这次机会总结和写下谓词的语法，方便以后开发查看&lt;/p&gt;

&lt;h2 id=&quot;nspredicate-的语法&quot;&gt;NSPredicate 的语法&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;比较运算符&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;=，==：判断两个表达式是否相等，在谓词中=和==是相同的意思都是判断，而没有赋值这一说&lt;/li&gt;
      &lt;li&gt;=，=&amp;gt;：判断左边表达式的值是否大于或等于右边表达式的值&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; ：判断左边表达式的值是否大于右边表达式的值&lt;/li&gt;
      &lt;li&gt;&amp;lt;：判断左边表达式的值是否小于右边表达式的值&lt;/li&gt;
      &lt;li&gt;!=、&amp;lt;&amp;gt;：判断两个表达式是否不相等&lt;/li&gt;
      &lt;li&gt;BETWEEN：BETWEEN 表达式必须满足表达式 BETWEEN {下限，上限}的格式，要求该表达式必须大于或等于下限，并小于或等于上限&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//数据源
let word = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;j&quot;,&quot;k&quot;,&quot;l&quot;,&quot;m&quot;,&quot;n&quot;,&quot;o&quot;]
//相等判断
let equalPredicate:NSPredicate = NSPredicate.init(format: &quot;SELF == 'b'&quot;)
print(&quot;word[1] is = b -&amp;gt; \(equalPredicate.evaluate(with: word[1]))&quot;)
//之间判断
let betweenPredicate:NSPredicate = NSPredicate.init(format: &quot;SELF BETWEEN {'d','m'}&quot;)
 for item in word {
      print(&quot;word item is between {'d','m'} -&amp;gt; \(betweenPredicate.evaluate(with: item))&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;word[1] is = b -&amp;gt; true
word item is between {'d','m'} -&amp;gt; false
word item is between {'d','m'} -&amp;gt; false
word item is between {'d','m'} -&amp;gt; false
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; false
word item is between {'d','m'} -&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;逻辑运算符&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;BEGINSWITH：检查某个字符串是否以指定的字符串开头（如判断字符串 是否以 a 开头：BEGINSWITH ‘a’）&lt;/li&gt;
      &lt;li&gt;ENDSWITH：检查某个字符串是否以指定的字符串结尾&lt;/li&gt;
      &lt;li&gt;CONTAINS：检查某个字符串是否包含指定的字符串&lt;/li&gt;
      &lt;li&gt;LIKE：检查某个字符串是否匹配指定的字符串模板。其之后可以跟?代表一个字符和&lt;em&gt;代表任意多个字符两个通配符。比如”name LIKE ‘&lt;/em&gt;ac&lt;em&gt;’“，这表示 name 的值中包含 ac 则返回 YES；”name LIKE ‘?ac&lt;/em&gt;’“，表示 name 的第 1、1. 个字符为 ac 时返回 YES。&lt;/li&gt;
      &lt;li&gt;MATCHES：检查某个字符串是否匹配指定的正则表达式。虽然正则表达式的执行效率是最低的，但其功能是最强大的，也是我们最常用的。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       注：字符串比较都是区分大小写和重音符号的。如：café 和 cafe 是不一样的，Cafe 和 cafe 也是不一样的。如果希望字符串比较运算不区分大小写和重音符号，请在这些运算符后使用[c]，[d]选项。其中[c]是不区分大小写，[d]是不区分重音符号，其写在字符串比较运算符之后，比如：name LIKE[cd] ‘cafe’，那么不论 name 是 cafe、Cafe 还是 café 上面的表达式都会返回 YES。&lt;/p&gt;

&lt;p&gt;例：最常见的就是正则匹配了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//判断是不是邮箱
let emailRegular = &quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}&quot;
let emailpredicate = NSPredicate(format:&quot;SELF MATCHES %@&quot;, emailRegular)
print(&quot;www.llllll.com is = email -&amp;gt; \(emailpredicate.evaluate(with: &quot;www.llllll.com&quot;))&quot;)
print(&quot;www@llllll.com is = email -&amp;gt; \(emailpredicate.evaluate(with: &quot;www@llllll.com&quot;))&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www.llllll.com is = email -&amp;gt; false
www@llllll.com is = email -&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;集合运算符&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;ANY、SOME：集合中任意一个元素满足条件，就返回 YES。&lt;/li&gt;
      &lt;li&gt;ALL：集合中所有元素都满足条件，才返回 YES。&lt;/li&gt;
      &lt;li&gt;NONE：集合中没有任何元素满足条件就返回 YES。如:NONE person.age &amp;lt; 18，表示 person 集合中所有元素的 age&amp;gt;=18 时，才返回 YES。&lt;/li&gt;
      &lt;li&gt;IN：等价于 SQL 语句中的 IN 运算符，只有当左边表达式或值出现在右边的集合中才会返回 YES。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//数据源
let word = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;j&quot;,&quot;k&quot;,&quot;l&quot;,&quot;m&quot;,&quot;n&quot;,&quot;o&quot;]
//集合判断
let equalPredicate:NSPredicate = NSPredicate.init(format: &quot;NONE SELF &amp;gt; 'p'&quot;)
print(&quot;word 所有元素都不是大于p -&amp;gt; \(equalPredicate.evaluate(with: word))&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;word 所有元素都不是大于p -&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;直接量值&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;FALSE、NO：代表逻辑假&lt;/li&gt;
      &lt;li&gt;TRUE、YES：代表逻辑真&lt;/li&gt;
      &lt;li&gt;NULL、NIL：代表空值&lt;/li&gt;
      &lt;li&gt;SELF：代表正在被判断的对象自身&lt;/li&gt;
      &lt;li&gt;“string”或’string’：代表字符串&lt;/li&gt;
      &lt;li&gt;数组：和 c 中的写法相同，如：{‘one’, ‘two’, ‘three’}。&lt;/li&gt;
      &lt;li&gt;数值：包括证书、小数和科学计数法表示的形式&lt;/li&gt;
      &lt;li&gt;十六进制数：0x 开头的数字&lt;/li&gt;
      &lt;li&gt;八进制：0o 开头的数字&lt;/li&gt;
      &lt;li&gt;二进制：0b 开头的数字&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在谓词表达式中可以使用如上直接量&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保留值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       下列单词都是保留字（不论大小写）：AND、OR、IN、NOT、ALL、ANY、SOME、NONE、LIKE、CASEINSENSITIVE、CI、MATCHES、CONTAINS、BEGINSWITH、ENDSWITH、BETWEEN、NULL、NIL、SELF、TRUE、YES、FALSE、NO、FIRST、LAST、SIZE、ANYKEY、SUBQUERY、CAST、TRUEPREDICATE、FALSEPREDICATE&lt;/p&gt;

&lt;p&gt;       注：虽然大小写都可以，但是更推荐使用大写来表示这些保留字，也是上面介绍到的语法，没介绍到的自己理解吧，或者给我留言&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在谓词中使用占位符参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;%K：用于动态传入属性名&lt;/p&gt;

&lt;p&gt;%@：用于动态设置属性值&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;例：最后来一个综合的本地搜索吧，对自定义对象进行筛选&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//自定义对象
@interface YContactObject : NSObject
/**
 *  联系人的姓名对象
 */
@property (nonatomic, strong)YContactNameObject * nameObject;
@end

//姓名对象
@interface YContactNameObject : NSObject
/**
 *  姓名
 */
@property (nonatomic, copy)NSString * name;
/**
 *  昵称
 */
@property (nonatomic, copy) NSString * nickName;
/**
 *  名字
 */
@property (nonatomic, copy) NSString * givenName;

-(NSString *)getName
{
    //除nil处理
    self.middleName = (self.middleName) ? self.middleName : @&quot;&quot;;
    self.givenName = (self.givenName) ? self.givenName : @&quot;&quot;;
    self.familyName = (self.familyName) ? self.familyName : @&quot;&quot;;

    self.name = [[self.familyName stringByAppendingString:self.middleName] stringByAppendingString:self.givenName];

    return self.name;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//通讯录数组
self.sourceContactObjects:[YContactObject] = [**********]
self.contactObjects:[YContactObject] = []
//姓名过滤谓词
let predicateString:String = String.init(format: &quot;(SELF.nameObject.getName CONTAINS '%@') OR ((SELF.phoneObject != NIL) AND (SELF.getFirstPhone CONTAINS '%@'))&quot;, searchText,searchText)
let filterPredicate:NSPredicate = NSPredicate.init(format: predicateString)
self.contactObjects = (sourceContactObjects as NSArray).filtered(using: filterPredicate) as! [YContactObject]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行结果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2007491-d7ab80c54deffbd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Simulator Screen Shot 2017年9月11日 下午5.17.43.png&quot; /&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2007491-ff5a81fd05ff917a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Simulator Screen Shot 2017年9月11日 下午5.17.50.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后续有什么问题或者建议，请给我留言&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/iOS-NSPredicate-%E8%B0%93%E8%AF%8D-%E8%AF%AD%E6%B3%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/iOS-NSPredicate-%E8%B0%93%E8%AF%8D-%E8%AF%AD%E6%B3%95/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>Git 1、起步</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;       在工作使用到很多常用工具，遇到问题百度/谷歌一下就知道怎么使用，日积月累了很多知识点和使用技能，但是没有整理成专题的知识体系，为了方便以后遇到问题或者空闲阅读的时候当字典查阅。就从这篇开始对 Git 知识体系进行连载。&lt;/p&gt;

&lt;h2 id=&quot;git-起步&quot;&gt;Git 起步&lt;/h2&gt;

&lt;p&gt;       什么是“版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分布式版本控制系统&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-11-05/git_system.jpg&quot; alt=&quot;分布式版本控制系统&quot; title=&quot;分布式版本控制系统&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;直接记录快照，而非差异比较&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 快照流。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-11-05/git_storage.jpg&quot; alt=&quot;直接记录快照&quot; title=&quot;直接记录快照&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;近乎所有操作都是本地执行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       Git 在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。因为你在本地磁盘上就有项目的完整历史，所以大部分操作看起来瞬间完成。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Git 一般只添加数据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       你执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Git 三种状态&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Git 仓库目录： Git 用来保存项目的元数据和对象数据库的地方。&lt;/li&gt;
      &lt;li&gt;工作目录：对项目的某个版本独立提取出来的内容。&lt;/li&gt;
      &lt;li&gt;暂存区域：是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-11-05/git_state.jpg&quot; alt=&quot;直接记录快照&quot; title=&quot;直接记录快照&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/11/Git-1-%E8%B5%B7%E6%AD%A5/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/Git-1-%E8%B5%B7%E6%AD%A5/</guid>
        
        <category>git</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>iOS Objective-C与Swift闭包（block）写法</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;       在项目开发中经常会去查 iOS 闭包怎么写，因为它的语法太古怪，两种语言写法不一，经常搞混，干脆记录下常用的写法算了&lt;/p&gt;

&lt;h2 id=&quot;闭包&quot;&gt;闭包&lt;/h2&gt;

&lt;p&gt;       闭包是指可以包含自由（未绑定到特定对象）变量的代码块；这些变量不是在这个代码块内或者任何全局上下文中定义的，而是在定义代码块的环境中定义（局部变量）。&lt;/p&gt;

&lt;p&gt;       “闭包” 一词来源于以下两者的结合：要执行的代码块（由于自由变量被包含在代码块中，这些自由变量以及它们引用的对象没有被释放）和为自由变量提供绑定的计算环境（作用域）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;声明闭包（block）&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objective-C&quot;&gt;typedef NSString *(^blockType)(NSString *parameter1, NSString *parameter2);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;typealias blockType = (_ parameter1:String, parameter2:String ) -&amp;gt; Void
var objectBlock:blockType?
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;定义闭包（block）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 第一种方式 使用声明
@property (nonatomic,strong) blockType *objectBlock;

_objectBlock = ^(NSString *parameter1,NSString *parameter2){
    return parameter1;
};
// 第二种方式 不使用声明
@property (nonatomic,strong) NSString *(^objectBlock)(NSString *parameter1, NSString *parameter2);

_objectBlock = ^(NSString *parameter1,NSString *parameter2){
    return parameter1;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let blockCallbackName:String = {(parameter1:String, parameter2:String) -&amp;gt;String in
    return parameter1
}(&quot;parameter1&quot;,&quot;parameter2&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;函数定义闭包（block）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)functionUseBlock:(NSString* (^)(NSString *parameter1, NSString *parameter2))callBackOne callBackTwo:(blockCallbackType)callBackTwo{
    if (callBackOne) {
        callBackOne(@&quot;parameter1&quot;,@&quot;parameter2&quot;);
    }
    if (callBackTwo) {
        callBackTwo(@&quot;parameter1&quot;,@&quot;parameter2&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func functionUseBlock(callBack:(String,String) -&amp;gt;String) -&amp;gt; Void  {
    print(callBack(&quot;parameter1&quot;,&quot;parameter2&quot;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;调用函数闭包（block）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[self functionUseBlock:^NSString *(NSString *parameter1, NSString *parameter2) {
    return parameter1;
} callBackTwo:^NSString *(NSString *parameter1, NSString *parameter2) {
    return parameter1;
}];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.functionUseBlock = { (parameter1, parameter2) -&amp;gt; String in
    return parameter2
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;结尾&quot;&gt;结尾&lt;/h2&gt;

&lt;p&gt;Swift 版本根据参数和返回值有很多缩写方式，这里就不一一写上了。&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/11/iOS-Objective-C%E4%B8%8ESwift%E9%97%AD%E5%8C%85-block-%E5%86%99%E6%B3%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/iOS-Objective-C%E4%B8%8ESwift%E9%97%AD%E5%8C%85-block-%E5%86%99%E6%B3%95/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>Mac下cocoapods的配置安装</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;       由于项目开发需要运用第三发库太多了，每下载一个第三个库都要去查看他的配置介绍然而就会一个一个的去引用系统的库，还有第三方库的管理问题，于是前段时间选择使用 cocoapods 进行管理。每个程序员都有两台电脑（一台公司的，一台自己的），在公司配置完成，经过重重配置遇到问题解决，终于配置完成。突然发现自己电脑也要配置，然后之前遇到的问题也一个一个的又去查（这不是坑自己吗）。算了作为程序员还是写点博客比较好，记录自己所遇到的问题和自己的知识；方便你我，方便阅读的人。&lt;/p&gt;

&lt;h2 id=&quot;配置步骤&quot;&gt;配置步骤&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;标签&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       RVM，Ruby，CocoaPods&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;安装 RVM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       RVM:Ruby Version Manager,Ruby 版本管理器，包括 Ruby 的版本管理和 Gem 库管理(gemset)
向终端输入以下代码安装 RVM&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -L get.rvm.io | bash -s stable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;指定源&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source ~/.rvm/scripts/rvm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装成功后（由于安装会向网络下载文件可能会提示安装失败）向终端输入代码查看成功版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rvm -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;终端控制台会出现&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rvm 1.27.0 (latest) by Wayne E. Seguin &amp;lt;wayneeseguin@gmail.com&amp;gt;, Michal Papis &amp;lt;mpapis@gmail.com&amp;gt; [https://rvm.io/]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;使用 RVM 升级或者安装 Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       Ruby 一般 Mac 系统都会自带不需要安装升级，但是我安装的时候遇到 Ruby 版本过低提示错误信息 Error installing pods:activesupport requires Ruby version &amp;gt;= 2.2.2.，所以需要 rvm 对 Ruby 进行升级
终端输入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       可查看当前系统 Ruby 版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby 2.0.0p648 (2015-12-16 revision 53155) [x86_64-darwin15]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       所以我们需要对 ruby 进行升级，查看 rvm 版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rvm list known
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# MRI Rubies
[ruby-]1.8.6[-p420]
[ruby-]1.8.7[-head] # security released on head
[ruby-]1.9.1[-p431]
[ruby-]1.9.2[-p330]
[ruby-]1.9.3[-p551]
[ruby-]2.0.0[-p648]
[ruby-]2.1[.8]
[ruby-]2.2[.4]
[ruby-]2.3[.0]
[ruby-]2.2-head
ruby-head

# for forks use: rvm install ruby-head-&amp;lt;name&amp;gt; --url https://github.com/github/ruby.git --branch 2.2
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       安装 Ruby 输入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rvm install 2.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       终端输出太长，就不打印了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用 Ruby 安装 CocoaPods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       使用淘宝的 Ruby 镜像访问 cocoapods，官方代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/
$ gem sources -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       两句命令结果分别是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://gems.ruby-china.org/ added to sources
#这个我已经切换过了
source https://rubygems.org/ not present in cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*** CURRENT SOURCES ***

https://ruby.taobao.org/
https://gems.ruby-china.org/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       接下来就直接安装 CocoaPods&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       终端输出表示成功&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Password:
Fetching: activesupport-4.2.7.1.gem (100%)
Successfully installed activesupport-4.2.7.1
Fetching: claide-1.0.1.gem (100%)
Successfully installed claide-1.0.1
Fetching: cocoapods-core-1.1.1.gem (100%)
Successfully installed cocoapods-core-1.1.1
Fetching: cocoapods-downloader-1.1.2.gem (100%)
Successfully installed cocoapods-downloader-1.1.2
Fetching: cocoapods-trunk-1.1.1.gem (100%)
Successfully installed cocoapods-trunk-1.1.1
Fetching: fourflusher-2.0.1.gem (100%)
Successfully installed fourflusher-2.0.1
Fetching: gh_inspector-1.0.2.gem (100%)
Successfully installed gh_inspector-1.0.2
Fetching: molinillo-0.5.2.gem (100%)
Successfully installed molinillo-0.5.2
Fetching: xcodeproj-1.3.3.gem (100%)
Successfully installed xcodeproj-1.3.3
Fetching: cocoapods-1.1.1.gem (100%)
Successfully installed cocoapods-1.1.1
Parsing documentation for activesupport-4.2.7.1
Installing ri documentation for activesupport-4.2.7.1
Parsing documentation for claide-1.0.1
Installing ri documentation for claide-1.0.1
Parsing documentation for cocoapods-core-1.1.1
Installing ri documentation for cocoapods-core-1.1.1
Parsing documentation for cocoapods-downloader-1.1.2
Installing ri documentation for cocoapods-downloader-1.1.2
Parsing documentation for cocoapods-trunk-1.1.1
Installing ri documentation for cocoapods-trunk-1.1.1
Parsing documentation for fourflusher-2.0.1
Installing ri documentation for fourflusher-2.0.1
Parsing documentation for gh_inspector-1.0.2
Installing ri documentation for gh_inspector-1.0.2
Parsing documentation for molinillo-0.5.2
Installing ri documentation for molinillo-0.5.2
Parsing documentation for xcodeproj-1.3.3
Installing ri documentation for xcodeproj-1.3.3
Parsing documentation for cocoapods-1.1.1
Installing ri documentation for cocoapods-1.1.1
Done installing documentation for activesupport, claide, cocoapods-core, cocoapods-downloader, cocoapods-trunk, fourflusher, gh_inspector, molinillo, xcodeproj, cocoapods after 12 seconds
10 gems installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       再进行 pod 安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$pod setup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 26 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/10/Mac%E4%B8%8Bcocoapods%E7%9A%84%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/Mac%E4%B8%8Bcocoapods%E7%9A%84%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>MarkDown语法</title>
        <description>&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;

&lt;h2 id=&quot;语法&quot;&gt;语法&lt;/h2&gt;

&lt;h3 id=&quot;1标题&quot;&gt;1、标题&lt;/h3&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 这是一级标题
## 这是二级标题
### 这是三级标题
#### 这是四级标题
##### 这是五级标题
###### 这是六级标题
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;

&lt;h1 id=&quot;这是一级标题&quot;&gt;这是一级标题&lt;/h1&gt;
&lt;h2 id=&quot;这是二级标题&quot;&gt;这是二级标题&lt;/h2&gt;
&lt;h3 id=&quot;这是三级标题&quot;&gt;这是三级标题&lt;/h3&gt;
&lt;h4 id=&quot;这是四级标题&quot;&gt;这是四级标题&lt;/h4&gt;
&lt;h5 id=&quot;这是五级标题&quot;&gt;这是五级标题&lt;/h5&gt;
&lt;h6 id=&quot;这是六级标题&quot;&gt;这是六级标题&lt;/h6&gt;

&lt;h3 id=&quot;2字体&quot;&gt;2、字体&lt;/h3&gt;

&lt;p&gt;加粗：要加粗的文字左右分别用两个&lt;em&gt;号包起来&lt;br /&gt;
斜体：要倾斜的文字左右分别用一个&lt;/em&gt;号包起来&lt;br /&gt;
斜体加粗：要倾斜和加粗的文字左右分别用三个*号包起来&lt;br /&gt;
删除线：要加删除线的文字左右分别用两个~~号包起来&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**这是加粗的文字**
*这是倾斜的文字*`
***这是斜体加粗的文字***
~~这是加删除线的文字~~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这是加粗的文字&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;这是倾斜的文字&lt;/em&gt;`&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;这是斜体加粗的文字&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;del&gt;这是加删除线的文字&lt;/del&gt;&lt;/p&gt;

&lt;h3 id=&quot;3引用&quot;&gt;3、引用&lt;/h3&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;这是引用的内容
&amp;gt;&amp;gt;&amp;gt;这是引用的内容
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;这是引用的内容
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这是引用的内容&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;这是引用的内容&lt;/p&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;blockquote&gt;
            &lt;blockquote&gt;
              &lt;blockquote&gt;
                &lt;blockquote&gt;
                  &lt;blockquote&gt;
                    &lt;p&gt;这是引用的内容&lt;/p&gt;
                  &lt;/blockquote&gt;
                &lt;/blockquote&gt;
              &lt;/blockquote&gt;
            &lt;/blockquote&gt;
          &lt;/blockquote&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;4分割线&quot;&gt;4、分割线&lt;/h3&gt;

&lt;p&gt;语法：三个或者三个以上的 - 或者 * 都可以&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
&lt;span class=&quot;gd&quot;&gt;----
&lt;/span&gt;***
*****
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;5图片&quot;&gt;5、图片&lt;/h3&gt;

&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![图片alt](图片地址 ''图片title'')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;图片alt：是显示在图片下面的文字，相当于对图片内容的解释。   &lt;br /&gt;
图片title：是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![清纯小美女](https://pan.baidu.com/s/1-uVVCZQPsAcz8C7aXZ5egA &quot;美女&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;效果:&lt;br /&gt;
&lt;img src=&quot;https://thumbnail0.baidupcs.com/thumbnail/985381d0f3a52177d7a36e8a3f20844e?fid=218278091-250528-1822553445&amp;amp;time=1553068800&amp;amp;rt=sh&amp;amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-X6vbmz3ZYKvM%2BjiqZGeA8HltPqE%3D&amp;amp;expires=8h&amp;amp;chkv=0&amp;amp;chkbd=0&amp;amp;chkpc=&amp;amp;dp-logid=1825044843093892748&amp;amp;dp-callid=0&amp;amp;size=c710_u400&amp;amp;quality=100&amp;amp;vuk=-&amp;amp;ft=video&quot; alt=&quot;清纯小美女&quot; title=&quot;美女&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6超链接&quot;&gt;6、超链接&lt;/h3&gt;

&lt;p&gt;语法：&lt;br /&gt;
第一种:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[超链接名](超链接地址 &quot;超链接title&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;超链接title:可加可不加&lt;/p&gt;

&lt;p&gt;第二种:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&amp;gt;超链接名&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[谷歌](http://google.com)
[百度](http://baidu.com)

&amp;lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot;&amp;gt;简书&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://google.com&quot;&gt;谷歌&lt;/a&gt;
&lt;a href=&quot;http://baidu.com&quot;&gt;百度&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;7超链接&quot;&gt;7、超链接&lt;/h3&gt;

&lt;p&gt;语法：&lt;br /&gt;
无序列表：用 - + * 任何一种都可以&lt;br /&gt;
有序列表：数字加点方式
列表嵌套：上一级和下一级之间敲三个空格即可&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 列表内容
+ 列表内容
* 列表内容
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;注意：- + * 跟内容之间都要有一个空格&lt;/p&gt;

&lt;p&gt;效果：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;列表内容&lt;/li&gt;
  &lt;li&gt;列表内容&lt;/li&gt;
  &lt;li&gt;列表内容&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 列表内容
2. 列表内容
3. 列表内容
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;注意：序号跟内容之间要有空格&lt;/p&gt;

&lt;p&gt;效果：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;列表内容&lt;/li&gt;
  &lt;li&gt;列表内容&lt;/li&gt;
  &lt;li&gt;列表内容&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 级无序列表内容 
   * 二级无序列表内容
   * 二级无序列表内容
   * 二级无序列表内容
* 一级无序列表内容
   1. 二级有序列表内容
   2. 二级有序列表内容
   3. 二级有序列表内容
1. 一级有序列表内容
   - 二级无序列表内容
   - 二级无序列表内容
   - 二级无序列表内容
2. 一级有序列表内容
   1. 二级有序列表内容
   2. 二级有序列表内容
   3. 二级有序列表内容
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;级无序列表内容
    &lt;ul&gt;
      &lt;li&gt;二级无序列表内容&lt;/li&gt;
      &lt;li&gt;二级无序列表内容&lt;/li&gt;
      &lt;li&gt;二级无序列表内容&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一级无序列表内容
    &lt;ol&gt;
      &lt;li&gt;二级有序列表内容&lt;/li&gt;
      &lt;li&gt;二级有序列表内容&lt;/li&gt;
      &lt;li&gt;二级有序列表内容
        &lt;ol&gt;
          &lt;li&gt;一级有序列表内容
    - 二级无序列表内容
    - 二级无序列表内容
    - 二级无序列表内容&lt;/li&gt;
          &lt;li&gt;一级有序列表内容&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;二级有序列表内容&lt;/li&gt;
      &lt;li&gt;二级有序列表内容&lt;/li&gt;
      &lt;li&gt;二级有序列表内容&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;8表格&quot;&gt;8、表格&lt;/h3&gt;

&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;表头|表头|表头
---|:--:|---:
内容|内容|内容
内容|内容|内容
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;第二行分割表头和内容。
- 有一个就行，为了对齐，多加了几个文字默认居左
- 两边加: 表示文字居中
- 右边加: 表示文字居右
注：原生的语法两边都要用 | 包起来。此处省略
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;表头&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;表头&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;表头&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;表头&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;内容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;内容&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;内容&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;内容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;内容&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;内容&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;内容&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;9代码&quot;&gt;9、代码&lt;/h3&gt;

&lt;p&gt;语法：&lt;br /&gt;
单行代码：代码之间分别用一个反引号包起来 &lt;br /&gt;
代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行(示例中没换行)&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`import Foundation`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```@IBAction func closeClick(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import Foundation&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@IBAction func closeClick(_ sender: Any) {
   self.navigationController?.popViewController(animated: true)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;10换行&quot;&gt;10、换行&lt;/h3&gt;

&lt;p&gt;语法：&lt;br /&gt;
方式一：编辑好一行文字后敲两个空行，再按回车键编辑另一行文字&lt;br /&gt;
方式二：编辑一行文字后再加一行空行&lt;br /&gt;
方式三：编辑第一行的时候后面加上&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;第一行  
第二行

第一行

第二行

第一行&amp;lt;br /&amp;gt;第二行
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;第一行&lt;br /&gt;
第二行&lt;/p&gt;

&lt;p&gt;第一行&lt;/p&gt;

&lt;p&gt;第二行&lt;/p&gt;

&lt;p&gt;第一行&lt;br /&gt;第二行&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/09/Markdown%E8%AF%AD%E6%B3%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/09/Markdown%E8%AF%AD%E6%B3%95/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
  </channel>
</rss>
