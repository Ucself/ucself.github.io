<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ucself</title>
    <description>嗨，我是ucself，一名大前端开发工程师。</description>
    <link>https://ucself.cn/</link>
    <atom:link href="https://ucself.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 03 Apr 2019 17:49:15 +0800</pubDate>
    <lastBuildDate>Wed, 03 Apr 2019 17:49:15 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>MAC系统命令大全（持续更新）</title>
        <description>&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;记录 MAC 系统的命令大全&lt;/p&gt;

&lt;p&gt;更全参考 Linux 命令大全： &lt;a href=&quot;http://www.runoob.com/linux/linux-command-manual.html&quot; title=&quot;Linux 命令大全&quot;&gt;http://www.runoob.com/linux/linux-command-manual.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;语法&quot;&gt;语法&lt;/h2&gt;

&lt;h3 id=&quot;目录操作&quot;&gt;目录操作&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;功能描述&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;使用举例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mkdir&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;创建一个目录&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;mkdir dirname&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rmdir&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;删除一个目录&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;rmdir dirname&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mvdir&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;移动或重命名一个目录&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;mvdir dir1 dir2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;改变当前目录&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cd dirname&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pwd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示当前目录的路径名&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;pwd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ls&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示当前目录的内容&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;ls -la&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;dircmp&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;比较两个目录的内容&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;dircmp dir1 dir2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;文件操作&quot;&gt;文件操作&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;功能描述&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;使用举例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;cat&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示或连接文件&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cat filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pg&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;分页格式化显示文件内容&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;pg filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;more&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;分屏显示文件内容&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;more filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;od&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示非文本文件的内容&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;od -c filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cp&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;复制文件或目录&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cp file1 file2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rm&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;删除文件或目录&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;rm filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mv&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;改变文件名或所在目录&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;mv file1 file2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ln&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;联接文件&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;ln -s file1 file2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;find&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;使用匹配表达式查找文件&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;find . -name “*.c” -print&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;file&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示文件类型&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;file filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;open&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;使用默认的程序打开文件&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;open filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;curl&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;下载文件命令&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;curl [选项][下载地址]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;unzip&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;解压文件&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;unzip mylab2.zip&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;选择操作&quot;&gt;选择操作&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;功能描述&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;使用举例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;head&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示文件的最初几行&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;head -20 filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tail&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示文件的最后几行&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;tail -15 filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cut&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示文件每行中的某些域&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cut -f1,7 -d: /etc/passwd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;colrm&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;从标准输入中删除若干列&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;colrm 8 20 file2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;paste&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;横向连接文件&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;paste file1 file2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;diff&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;比较并显示两个文件的差异&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;diff file1 file2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sed&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;非交互方式流编辑器&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;sed “s/red/green/g” filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;grep&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;在文件中按模式查找&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;grep “^[a-zA-Z]” filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;awk&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;在文件中查找并处理模式&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;awk ‘{print $1 $1}’ filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sort&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;排序或归并文件&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;sort -d -f -u file1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uniq&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;去掉文件中的重复行&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;uniq file1 file2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;comm&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示两有序文件的公共和非公共行&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;comm file1 file2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;wc&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;统计文件的字符数、词数和行数&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;wc filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nl&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;给文件加上行号&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;nl file1 &amp;gt;file2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;安全操作&quot;&gt;安全操作&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;功能描述&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;使用举例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;sudo&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;获得权限&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;sudo －s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;passwd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;修改用户密码&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;passwd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;chmod&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;改变文件或目录的权限&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;chmod ug+x filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;umask&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;定义创建文件的权限掩码&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;umask 027&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;chown&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;改变文件或目录的属主&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;chown newowner filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;chgrp&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;改变文件或目录的所属组&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;chgrp staff filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;xlock&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;给终端上锁&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;xlock -remote&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;编程操作&quot;&gt;编程操作&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;功能描述&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;使用举例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;make&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;维护可执行程序的最新版本&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;make&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;touch&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;更新文件的访问和修改时间&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;touch -m 05202400 filename&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;dbx&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;命令行界面调试工具&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;dbx a.out&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;xde&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;图形用户界面调试工具&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;xde a.out&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;进程操作&quot;&gt;进程操作&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;功能描述&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;使用举例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ps&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示进程当前状态&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;ps u&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;kill&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;终止进程&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;kill -9 30142&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nice&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;改变待执行命令的优先级&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;nice cc -c *.c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;renice&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;改变已运行进程的优先级&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;renice +20 32768&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;时间操作&quot;&gt;时间操作&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;功能描述&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;使用举例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;date&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示系统的当前日期和时间&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;date&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cal&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示日历&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cal 8 1996&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;time&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;统计程序的执行时间&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;time a.out&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;网络与通信操作&quot;&gt;网络与通信操作&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;功能描述&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;使用举例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;telnet&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;远程登录&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;date&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rlogin&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;远程登录&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;rlogin hostname -l username&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rsh&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;在远程主机执行指定命令&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;rsh f01n03 date&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ftp&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;在本地主机与远程主机之间传输文件&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;ftp ftp.sp.net.edu.cn&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rcp&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;在本地主机与远程主机 之间复制文件&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;rcp file1 host1:file2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ping&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;给一个网络主机发送 回应请求&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;ping hpc.sp.net.edu.cn&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mail&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;阅读和发送电子邮件&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;mail&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;write&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;给另一用户发送报文&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;write username pts/1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mesg&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;允许或拒绝接收报文&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;mesg n&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;korn-shell-命令&quot;&gt;Korn Shell 命令&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;功能描述&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;使用举例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;history&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;列出最近执行过的 几条命令及编号&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;history&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;r&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;重复执行最近执行过的 某条命令&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;r -2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;alias&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;给某个命令定义别名&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;alias del=rm -i&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;unalias&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;取消对某个别名的定义&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;unalias del&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;其他命令&quot;&gt;其他命令&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;功能描述&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;使用举例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;uname&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示操作系统的有关信息&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;uname -a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;clear&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;清除屏幕或窗口内容&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;clear&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;env&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示当前所有设置过的环境变量&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;env&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;who&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;列出当前登录的所有用户&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;who&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;whoami&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示当前正进行操作的用户名&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;whoami&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tty&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示终端或伪终端的名称&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;tty&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;stty&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示或重置控制键定义&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;stty -a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;du&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;查询磁盘使用情况&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;du -k subdir&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;df&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示文件系统的总空间和可用空间&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;df /tmp&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;w&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示当前系统活动的总信息&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;w&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Wed, 03 Apr 2019 00:00:00 +0800</pubDate>
        <link>https://ucself.cn/2019/04/MAC%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</link>
        <guid isPermaLink="true">https://ucself.cn/2019/04/MAC%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>2018年终总结，2019年初计划</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;       最近一段时间比较懵逼（以下的解决状态），感觉又一次浑浑噩噩的状态来临，似曾相识的感觉，想必许多人也有这样的状态过。我发誓要好好利用，不能再这样浪费时间。借此机会划写一篇“2018 年终总结，2019 年初计划”，来寻找原因，解决状态，制定计划。&lt;/p&gt;

&lt;h3 id=&quot;寻找原因&quot;&gt;寻找原因&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;目标计划&lt;/p&gt;

    &lt;p&gt;       说到计划，其实每个人都计划过，我现在还能翻开刚毕业时候写的人生规划列表。包含了硬实力（第一年初级工程师，第二年中级工程…）和软实力（第一年，第二年…），现在想起来都想笑，哈哈。算了不说无用的，来分析一下没有实施的原因：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;目标太大而远：打一个比方，相当于“5 年后我要当上 CEO，迎娶白富美”，这目标太大，都不知道 CEO 需要哪些能力，自己有什么能力，这个 5 年的时间也太长了吧，说不一定已经嗝屁了呢，也不是说有长目标不好，就是感觉目前对我来说没太大用处。&lt;/li&gt;
      &lt;li&gt;目标不够明确：对于目标应该达到什么明确结果，而不是虚拟的&lt;/li&gt;
      &lt;li&gt;没有细化成小目标：在指定目标的时候并不知道执行过程中需要做什么，没有细分&lt;/li&gt;
      &lt;li&gt;目标没有执行约束：没有执行约束，想干嘛就干嘛，拖着就拖着，然后就拖忘掉了，最后完全没达到自我的预期&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;知识体系&lt;/p&gt;

    &lt;p&gt;       对于知识体系，我曾经也搭建过，记录过，比如使用《有道笔记》记录学习 swift 语言的各个章节内容和自己写的 demo；使用 github 的 star/fork 记录优秀的框架；使用百度网盘保存资源等等。但是知识体系感觉还是很散落。
打一个比方，2018 年底 2019 年初互联网寒冬，互联网公司很多都在裁员（我们公司也在裁员，这次没有裁到我），领导们都叫我们充电。我在设想，如果裁员裁到我，我能否迅速的寻找下一家公司的时候汇集我知识体系，达到我最好的状态，显然不行。领导们叫我们充电，只是说明一种信号，到底冲什么呢，我觉得是搭建自我良好的知识体系。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自制力，约束&lt;/p&gt;

    &lt;p&gt;       说到没有自制力和约束：那就是在个人空档期的时候，自己未找到充电的方式，不充实。&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;第一个原因：没有建立良性的目标任务，任务的严重程度和时间紧迫度，比如在工作，任务都完成的情况，空闲时间刷刷抖音，看看新闻，聊聊微信，半天就过去了，在玩玩游戏，一天就过去了。&lt;/li&gt;
      &lt;li&gt;第二个原因：建立在环境下，学习工作的气氛。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;解决状态&quot;&gt;解决状态&lt;/h3&gt;

&lt;p&gt;状态首先捋一捋之前什么状态需要解决：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;忙碌期：任务太多的时候，非常忙碌，加班，这时候充实，严重的时候会反感。&lt;/li&gt;
  &lt;li&gt;空档期：在工作生活空档期，比较闲，有些时候看看新闻资料，时间过得超慢，感觉在浪费时间，不想这样特别难受。&lt;/li&gt;
  &lt;li&gt;知识沉淀：在空档期，或者忙碌期都没有知识体系沉淀，到了关键回想整理的时候全部靠脑子回想收之甚少，难受。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;好吧，现在来解决解决。理清楚了上面“寻找原因”，这三个状态其实很好解决：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先建立“时间任务管理”来指定小目标：采用象限时间任务管理，当脑子里凸显出我想做什么\我应该做什么的时候（任务指派我），就按照重要性与紧迫性写入任务。按照任务管理做就行了&lt;/li&gt;
  &lt;li&gt;在自己的“时间任务管理”的小目标中，觉得可以作为知识体系建立的使用 github 博客，进行分类归档&lt;/li&gt;
  &lt;li&gt;在“自制力/约束”方面：紧迫性的“时间任务管理”已有；工作提升气氛方面，使用正确使用坐姿工作和娱乐，不要给身体一种懒散的状态。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;制定计划&quot;&gt;制定计划&lt;/h3&gt;

&lt;p&gt;好了，对自己分析那么多，制定点改善计划吧。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用笔记 “象限时间任务管理”。曾经使用过任务管理软件，道理时间就会提醒，让自己难受，任务就是在做事的时候去根据优先级选择做，不能让自己难受。&lt;/li&gt;
  &lt;li&gt;使用 github 静态网站，作为知识体系记录。&lt;/li&gt;
  &lt;li&gt;家里有自己工作，任务环境。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;临时笔记，数据记录使用“有道笔记”；自我文件资源使用在“百度网盘”；关于 IT 项目资源使用“github”；各种浏览书签使用“safari”；常用软件（mac，windows）记录待发现&lt;/p&gt;

&lt;h2 id=&quot;2018-总结&quot;&gt;2018 总结&lt;/h2&gt;

&lt;p&gt;当写入到 2018 总结一栏的时候停顿了很久，没有记录全靠脑子回想难受，明年应该就不会了。&lt;/p&gt;

&lt;p&gt;首先列出几个 2018 的大节点吧：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;App 发布 15 次版本&lt;/li&gt;
  &lt;li&gt;在雷神指导下搭建 jenkins + fastlane + pgy App 打包自动构建&lt;/li&gt;
  &lt;li&gt;在雷神指导下完善工具链 App 研发并投入研发部使用&lt;/li&gt;
  &lt;li&gt;小试 RN 接入 App 研发，同一套代码三端运行&lt;/li&gt;
  &lt;li&gt;新增加研发功能菜单，方便与 H5 端同事，测试同事，native 同事联调&lt;/li&gt;
  &lt;li&gt;新使用第三方 SDK&lt;/li&gt;
  &lt;li&gt;初步了解进入前端开发 rect 体系并做了小型研发类型项目&lt;/li&gt;
  &lt;li&gt;在软实力方面在关注，软实力提示展示毕竟与自己能力、视野有关&lt;/li&gt;
  &lt;li&gt;在业务与自定义任务工作中，对技术能力，技术使用广度都有提升&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在找找自己的不足吧：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这些大节点能回想起，但是做完之后没有归档到相应的知识体系&lt;/li&gt;
  &lt;li&gt;如何再一次做这些功能，可能回去翻阅旧代码和文档(缺乏总结产物)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2019-计划&quot;&gt;2019 计划&lt;/h2&gt;

&lt;p&gt;在 2019 来临之际根据前言，2018 总结，指定些应该自我改变的目标与计划：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用“象限时间任务管理”，管理自我目标，任务（实践中不行，再换）(明确目标)&lt;/li&gt;
  &lt;li&gt;对已经完成过得任务目标，进行知识体系构建，记录在 github 静态站中(明确目标)&lt;/li&gt;
  &lt;li&gt;深入 Native 技术能力（毕竟是吃饭的家伙），熟练前端 React 体系研发能力(明确目标)&lt;/li&gt;
  &lt;li&gt;自制力提升（改变在任务目标，环境方式提升）(虚拟目标)&lt;/li&gt;
  &lt;li&gt;软实力提升（学习周围人和能力）(虚拟目标)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 16 Jan 2019 00:00:00 +0800</pubDate>
        <link>https://ucself.cn/2019/01/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93-2019%E5%B9%B4%E5%88%9D%E8%AE%A1%E5%88%92/</link>
        <guid isPermaLink="true">https://ucself.cn/2019/01/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93-2019%E5%B9%B4%E5%88%9D%E8%AE%A1%E5%88%92/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>iOS UIViewController的self.view布局位置问题。</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;       在平时的开发中，打开布局查看器老是遇见 self.view 有的控制器顶在了 navagationbar 上面，有的控制器顶在了 navagationbar 下面；一直很纠结这个问题，最近专门研究一下，并记录下来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-01b78db0d3ce2ea7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里不做详细介绍了，如果不愿意详细看下面文章就看我总结吧，很详细的介绍在：https://www.jianshu.com/p/6925ce1b9e34&lt;/p&gt;

&lt;p&gt;这里做一个总结：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;影响到 self.view 是顶入顶部（有 navagationbar）或者底部（有 tabbar）有三个属性可以影响到：&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;isTranslucent（所属 UINavigationBar），&lt;/li&gt;
  &lt;li&gt;edgesForExtendedLayout（所属 UIViewController），&lt;/li&gt;
  &lt;li&gt;extendedLayoutIncludesOpaqueBars（所属 UIViewController）&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;isTranslucent 与 edgesForExtendedLayout 相互影响是否顶入顶部或底部，
举例：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;（isTranslucent 为 true 和 edgesForExtendedLayout 为 all ）就 self.view 顶入顶部和底部，&lt;/li&gt;
      &lt;li&gt;（isTranslucent 为 false 和 edgesForExtendedLayout 为 all ）就 self.view 不顶入顶部和底部，&lt;/li&gt;
      &lt;li&gt;（isTranslucent 为 true 和 edgesForExtendedLayout 为.top ）就 self.view 顶入顶部和不顶入底部，
其他的属性就自己揣测吧。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;extendedLayoutIncludesOpaqueBars = true 可忽略 isTranslucent 对导航栏的影响（可以理解为：在其他默认设置情况先设置 extendedLayoutIncludesOpaqueBars = true， self.view 顶入顶部和底部）；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 30 Mar 2018 00:00:00 +0800</pubDate>
        <link>https://ucself.cn/2018/03/iOS-UIViewController%E7%9A%84self.view%E5%B8%83%E5%B1%80%E4%BD%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">https://ucself.cn/2018/03/iOS-UIViewController%E7%9A%84self.view%E5%B8%83%E5%B1%80%E4%BD%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>swift 工程 TARGETS与预定义宏</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;       最近公司项目接入妙健康 framework 的时候，framework 不支持模拟器；如果接入进去整个工程都不支持模拟器了，这怎么得了，所以想了一个办法。
想到的办法与实践是：给整个 iOS 添加 TARGETS，模拟器使用的 Targets 工程 不接入妙健康 framework，真机运行的 Targets 工程接入妙健康 framework；其他项目文件两个 Targets 工程一起使用；共同使用的文件再根据各自的 Targets 工程预定义宏方式进行判断是否写秒健康代码，如图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-a0e8899d3ad832ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;具体操作步骤&quot;&gt;具体操作步骤：&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;设置 Targets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       通过如图方式复制一份现有工程，然后更名为：DoctorHealthSimulator
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-921754d3e32f0e3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;
结果：
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-f4cea8f9629bf4bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;设置 targets 下的文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       把不需要接入的 framework 或者文件的 Target Membership 的 DoctorHealthSimulator 为未选中，如果在没有写任何接入代码的时候，就可以用模拟器编译 DoctorHealthSimulator 就不会报错了
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-dd8cb02f96898004.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;设置文件引用，预编译宏&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       这时候真机运行的 DoctorHealth 要写接入代码，而模拟器运行 DoctorHealthSimulator 不需要写接入代码，但是他们都引用了同一个文件，像下面这样干，&lt;/p&gt;

&lt;p&gt;a、如果是 swift 工程项目，选中 DoctorHealth -&amp;gt;build Settings -&amp;gt; other swift flags 加入如图所示配置（最后一个）
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-5d8be25bee330e4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DoctorHealthSimulator 就不用配置任何东西
公用文件就像如图写：
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-eb6f2452823f12bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;b、如果是 OC 项目工程，选中 DoctorHealth -&amp;gt;build Settings -&amp;gt; preprocessor macros 加入如图所示配置（最后一个）
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2007491-1e73ad7d66bbc668.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;
代码和 swift 工程方式写，配置完成&lt;/p&gt;

&lt;p&gt;c、如果是混合编写的工程，OC 与 swift 代码都需要用到，则两个地方都要配置预编译宏&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这样就完成了所需的配置。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       只是模拟器运行 DoctorHealthSimulator 工程，真机运行 DoctorHealth 工程，就达到了需要的效果，模拟器只是没有妙健康的功能（本来模拟器就不支持蓝牙等功能）&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Mar 2018 00:00:00 +0800</pubDate>
        <link>https://ucself.cn/2018/03/swift-%E5%B7%A5%E7%A8%8B-TARGETS%E4%B8%8E%E9%A2%84%E5%AE%9A%E4%B9%89%E5%AE%8F/</link>
        <guid isPermaLink="true">https://ucself.cn/2018/03/swift-%E5%B7%A5%E7%A8%8B-TARGETS%E4%B8%8E%E9%A2%84%E5%AE%9A%E4%B9%89%E5%AE%8F/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>iOS框架如何发布到CocoaPods</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;经常使用别人的封装库或者项目，在项目开发中自己也有封装，即使不能给别人广泛使用，也可以自己在多项目中 pod 方式使用自己封装的代码
前提：mac 上已经装好了 pod,git&lt;/p&gt;

&lt;h2 id=&quot;一创建自己库添加-cocoapods-支持&quot;&gt;一、创建自己库添加 Cocoapods 支持&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;基于 pod 自动创建项目&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在终端输入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod lib create JGCache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;提示对应的询问命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cloning `https://github.com/CocoaPods/pod-template.git` into `JGCache`.
Configuring JGCache template.

------------------------------

To get you started we need to ask a few questions, this should only take a minute.

If this is your first time we recommend running through with the guide:
 - http://guides.cocoapods.org/making/using-pod-lib-create.html
 ( hold cmd and double click links to open in a browser. )


What language do you want to use?? [ Swift / ObjC ]
 &amp;gt; Swift

Would you like to include a demo application with your library? [ Yes / No ]
 &amp;gt; Yes

Which testing frameworks will you use? [ Quick / None ]
 &amp;gt; None

Would you like to do view based testing? [ Yes / No ]
 &amp;gt; No
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;项目创建成功，并编译成功&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;接下来在https://github.com/官网自己的账号下创建一个仓库JGCache（这里不是重点，不用介绍了）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将 pod 命令自动创建的项目上传到 github JGCache 项目中，（这里不是重点，不用介绍了）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;给仓库 JGCache 主分支 master 创建一个 tag 0.1.0 （这里不是重点，不用介绍了）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开项目中的 JGCache.podspec 文件可以看到默认设置&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#
# Be sure to run `pod lib lint JGCache.podspec' to ensure this is a
# valid spec before submitting.
#
# Any lines starting with a # are optional, but their use is encouraged
# To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html
#

Pod::Spec.new do |s|
  s.name             = 'JGCache'
  s.version          = '0.1.0'
  s.summary          = 'A short description of JGCache.'

# This description is used to generate tags and improve search results.
#   * Think: What does it do? Why did you write it? What is the focus?
#   * Try to keep it short, snappy and to the point.
#   * Write the description between the DESC delimiters below.
#   * Finally, don't worry about the indent, CocoaPods strips it!

  s.description      = &amp;lt;&amp;lt;-DESC
TODO: Add long description of the pod here.
                       DESC

  s.homepage         = 'https://github.com/lbj147123@163.com/JGCache'
  # s.screenshots     = 'www.example.com/screenshots_1', 'www.example.com/screenshots_2'
  s.license          = { :type =&amp;gt; 'MIT', :file =&amp;gt; 'LICENSE' }
  s.author           = { 'lbj147123@163.com' =&amp;gt; 'lbj147123@163.com' }
  s.source           = { :git =&amp;gt; 'https://github.com/lbj147123@163.com/JGCache.git', :tag =&amp;gt; s.version.to_s }
  # s.social_media_url = 'https://twitter.com/&amp;lt;TWITTER_USERNAME&amp;gt;'

  s.ios.deployment_target = '8.0'

  s.source_files = 'JGCache/Classes/**/*'

  # s.resource_bundles = {
  #   'JGCache' =&amp;gt; ['JGCache/Assets/*.png']
  # }

  # s.public_header_files = 'Pod/Classes/**/*.h'
  # s.frameworks = 'UIKit', 'MapKit'
  # s.dependency 'AFNetworking', '~&amp;gt; 2.3'
end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;修改项目中的 JGCache.podspec 文件的设置为（这里就不介绍每一项的意思了）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Pod::Spec.new do |s|
  s.name             = 'JGCache'
  s.version          = '0.1.0'
  s.summary          = 'this is description'

# This description is used to generate tags and improve search results.
#   * Think: What does it do? Why did you write it? What is the focus?
#   * Try to keep it short, snappy and to the point.
#   * Write the description between the DESC delimiters below.
#   * Finally, don't worry about the indent, CocoaPods strips it!

  s.description      = &amp;lt;&amp;lt;-DESC
TODO: this is description
                       DESC

  s.homepage         = 'https://github.com/Ucself/JGCache'
  # s.screenshots     = 'www.example.com/screenshots_1', 'www.example.com/screenshots_2'
  s.license          = { :type =&amp;gt; 'MIT', :file =&amp;gt; 'LICENSE' }
  s.author           = { '李保君' =&amp;gt; 'lbj147123@163.com' }
  s.source           = { :git =&amp;gt; 'https://github.com/Ucself/JGCache.git', :tag =&amp;gt; s.version.to_s }
  # s.social_media_url = 'https://twitter.com/&amp;lt;TWITTER_USERNAME&amp;gt;'

  s.ios.deployment_target = '8.0'

  s.source_files = 'JGCache/Classes/**/*'

  # s.resource_bundles = {
  #   'JGCache' =&amp;gt; ['JGCache/Assets/*.png']
  # }

  # s.public_header_files = 'Pod/Classes/**/*.h'
  # s.frameworks = 'UIKit', 'MapKit'
  s.dependency 'ObjectMapper', '~&amp;gt; 3.0.0'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;检测填写的 podspec 是否有错误，cd 进入 JGCache 文件目录&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod spec lint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;测试本地导入的文件是否报错。cd 进入项目 Example 文件路径,导入依赖的第三方库&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;上传的 cocopods 管理&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod trunk push JGCache.podspec --allow-warnings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;二更新自己库添加-cocoapods-支持&quot;&gt;二、更新自己库添加 Cocoapods 支持&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JGCache.podspec 文件中你需要更改的项目更改（主要更改版本如：1.0.0）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在啊 github 对你的工程添加标签如 1.0.0&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;上传工程工程代码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;再次执行&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod trunk push JGCache.podspec --allow-warnings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 01 Nov 2017 00:00:00 +0800</pubDate>
        <link>https://ucself.cn/2017/11/iOS%E6%A1%86%E6%9E%B6%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E5%88%B0CocoaPods/</link>
        <guid isPermaLink="true">https://ucself.cn/2017/11/iOS%E6%A1%86%E6%9E%B6%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E5%88%B0CocoaPods/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>iOS 中Frameworks，Pods ，-Bridging-Header.h桥接，import之间的理解</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在项目开发中，遇到一个问题，由于 Frameworks，Pods，-Bridging-Header.h，import 的使用不当会造成控制台日志报错问题&lt;/p&gt;

&lt;h2 id=&quot;frameworks&quot;&gt;Frameworks&lt;/h2&gt;

&lt;p&gt;Frameworks 顾名思义就是框架，是第三方打包完成看不到源码，可以直接使用的
在项目中引用方式&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OC  引用某一个文件，Frameworks一般会提供一个h文件引用全部其他文件
#import &amp;lt;JLRoutes/JLRoutes.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swift  引用一个包，相当于引用了Frameworks中的所有文件
import JLRoutes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pods-方式&quot;&gt;Pods 方式&lt;/h2&gt;

&lt;p&gt;Pods 在 iOS 中对封装的源码进行管理，可以视频 pod 方式导入项目中，相当于能看见源代码也能修改源代码的 Frameworks，有的不会生成 Frameworks 类似的包如：GrowingIO（因为在 swift 中 import GrowingIO 失败）
在项目中引用方式&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OC  引用某一个文件，Pods一般会提供一个h文件引用全部其他文件
#import &amp;lt;JLRoutes/JLRoutes.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swift  引用一个包，相当于引用了Pods中的所有文件
import JLRoutes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-bridging-headerh-桥接文件&quot;&gt;-Bridging-Header.h 桥接文件&lt;/h2&gt;

&lt;p&gt;桥接文件，即是 OC 的文件通过桥接到 Swift 能调用&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 swift 使用中我们可以对包（Frameworks/Pods）进行桥接，如&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;JLRoutes/JLRoutes.h&amp;gt;
#import &amp;lt;GrowingIO/Growing.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;绝不能使用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;#import “JLRoutes.h”&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;#import “Growing.h”&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;虽然不会错报，会出现控制台打印变量问题&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;项目中添加的 OC 代码就得使用&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &quot;JLRoutes.h&quot;
#import &quot;Growing.h&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;import-导入方式&quot;&gt;import 导入方式&lt;/h2&gt;

&lt;p&gt;如果是单个文件就需要导入，直接使用；如果是包&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import AFNetworking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 21 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://ucself.cn/2017/09/iOS-%E4%B8%ADFrameworks-Pods-Bridging-Header.h%E6%A1%A5%E6%8E%A5-import%E4%B9%8B%E9%97%B4%E7%9A%84%E7%90%86%E8%A7%A3/</link>
        <guid isPermaLink="true">https://ucself.cn/2017/09/iOS-%E4%B8%ADFrameworks-Pods-Bridging-Header.h%E6%A1%A5%E6%8E%A5-import%E4%B9%8B%E9%97%B4%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>iOS NSPredicate（谓词）语法</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;       在项目开发中遇见本地化搜索不是很高，当有本地化搜索的需求时候对 NSPredicate 的语法都去网上搜索，然而苹果官方也没有专门介绍语法，借这次机会总结和写下谓词的语法，方便以后开发查看&lt;/p&gt;

&lt;h2 id=&quot;nspredicate-的语法&quot;&gt;NSPredicate 的语法&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;比较运算符&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;=，==：判断两个表达式是否相等，在谓词中=和==是相同的意思都是判断，而没有赋值这一说&lt;/li&gt;
      &lt;li&gt;=，=&amp;gt;：判断左边表达式的值是否大于或等于右边表达式的值&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; ：判断左边表达式的值是否大于右边表达式的值&lt;/li&gt;
      &lt;li&gt;&amp;lt;：判断左边表达式的值是否小于右边表达式的值&lt;/li&gt;
      &lt;li&gt;!=、&amp;lt;&amp;gt;：判断两个表达式是否不相等&lt;/li&gt;
      &lt;li&gt;BETWEEN：BETWEEN 表达式必须满足表达式 BETWEEN {下限，上限}的格式，要求该表达式必须大于或等于下限，并小于或等于上限&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//数据源
let word = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;j&quot;,&quot;k&quot;,&quot;l&quot;,&quot;m&quot;,&quot;n&quot;,&quot;o&quot;]
//相等判断
let equalPredicate:NSPredicate = NSPredicate.init(format: &quot;SELF == 'b'&quot;)
print(&quot;word[1] is = b -&amp;gt; \(equalPredicate.evaluate(with: word[1]))&quot;)
//之间判断
let betweenPredicate:NSPredicate = NSPredicate.init(format: &quot;SELF BETWEEN {'d','m'}&quot;)
 for item in word {
      print(&quot;word item is between {'d','m'} -&amp;gt; \(betweenPredicate.evaluate(with: item))&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;word[1] is = b -&amp;gt; true
word item is between {'d','m'} -&amp;gt; false
word item is between {'d','m'} -&amp;gt; false
word item is between {'d','m'} -&amp;gt; false
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; true
word item is between {'d','m'} -&amp;gt; false
word item is between {'d','m'} -&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;逻辑运算符&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;BEGINSWITH：检查某个字符串是否以指定的字符串开头（如判断字符串 是否以 a 开头：BEGINSWITH ‘a’）&lt;/li&gt;
      &lt;li&gt;ENDSWITH：检查某个字符串是否以指定的字符串结尾&lt;/li&gt;
      &lt;li&gt;CONTAINS：检查某个字符串是否包含指定的字符串&lt;/li&gt;
      &lt;li&gt;LIKE：检查某个字符串是否匹配指定的字符串模板。其之后可以跟?代表一个字符和&lt;em&gt;代表任意多个字符两个通配符。比如”name LIKE ‘&lt;/em&gt;ac&lt;em&gt;’“，这表示 name 的值中包含 ac 则返回 YES；”name LIKE ‘?ac&lt;/em&gt;’“，表示 name 的第 1、1. 个字符为 ac 时返回 YES。&lt;/li&gt;
      &lt;li&gt;MATCHES：检查某个字符串是否匹配指定的正则表达式。虽然正则表达式的执行效率是最低的，但其功能是最强大的，也是我们最常用的。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       注：字符串比较都是区分大小写和重音符号的。如：café 和 cafe 是不一样的，Cafe 和 cafe 也是不一样的。如果希望字符串比较运算不区分大小写和重音符号，请在这些运算符后使用[c]，[d]选项。其中[c]是不区分大小写，[d]是不区分重音符号，其写在字符串比较运算符之后，比如：name LIKE[cd] ‘cafe’，那么不论 name 是 cafe、Cafe 还是 café 上面的表达式都会返回 YES。&lt;/p&gt;

&lt;p&gt;例：最常见的就是正则匹配了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//判断是不是邮箱
let emailRegular = &quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}&quot;
let emailpredicate = NSPredicate(format:&quot;SELF MATCHES %@&quot;, emailRegular)
print(&quot;www.llllll.com is = email -&amp;gt; \(emailpredicate.evaluate(with: &quot;www.llllll.com&quot;))&quot;)
print(&quot;www@llllll.com is = email -&amp;gt; \(emailpredicate.evaluate(with: &quot;www@llllll.com&quot;))&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www.llllll.com is = email -&amp;gt; false
www@llllll.com is = email -&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;集合运算符&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;ANY、SOME：集合中任意一个元素满足条件，就返回 YES。&lt;/li&gt;
      &lt;li&gt;ALL：集合中所有元素都满足条件，才返回 YES。&lt;/li&gt;
      &lt;li&gt;NONE：集合中没有任何元素满足条件就返回 YES。如:NONE person.age &amp;lt; 18，表示 person 集合中所有元素的 age&amp;gt;=18 时，才返回 YES。&lt;/li&gt;
      &lt;li&gt;IN：等价于 SQL 语句中的 IN 运算符，只有当左边表达式或值出现在右边的集合中才会返回 YES。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//数据源
let word = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;j&quot;,&quot;k&quot;,&quot;l&quot;,&quot;m&quot;,&quot;n&quot;,&quot;o&quot;]
//集合判断
let equalPredicate:NSPredicate = NSPredicate.init(format: &quot;NONE SELF &amp;gt; 'p'&quot;)
print(&quot;word 所有元素都不是大于p -&amp;gt; \(equalPredicate.evaluate(with: word))&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;word 所有元素都不是大于p -&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;直接量值&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;FALSE、NO：代表逻辑假&lt;/li&gt;
      &lt;li&gt;TRUE、YES：代表逻辑真&lt;/li&gt;
      &lt;li&gt;NULL、NIL：代表空值&lt;/li&gt;
      &lt;li&gt;SELF：代表正在被判断的对象自身&lt;/li&gt;
      &lt;li&gt;“string”或’string’：代表字符串&lt;/li&gt;
      &lt;li&gt;数组：和 c 中的写法相同，如：{‘one’, ‘two’, ‘three’}。&lt;/li&gt;
      &lt;li&gt;数值：包括证书、小数和科学计数法表示的形式&lt;/li&gt;
      &lt;li&gt;十六进制数：0x 开头的数字&lt;/li&gt;
      &lt;li&gt;八进制：0o 开头的数字&lt;/li&gt;
      &lt;li&gt;二进制：0b 开头的数字&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在谓词表达式中可以使用如上直接量&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保留值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       下列单词都是保留字（不论大小写）：AND、OR、IN、NOT、ALL、ANY、SOME、NONE、LIKE、CASEINSENSITIVE、CI、MATCHES、CONTAINS、BEGINSWITH、ENDSWITH、BETWEEN、NULL、NIL、SELF、TRUE、YES、FALSE、NO、FIRST、LAST、SIZE、ANYKEY、SUBQUERY、CAST、TRUEPREDICATE、FALSEPREDICATE&lt;/p&gt;

&lt;p&gt;       注：虽然大小写都可以，但是更推荐使用大写来表示这些保留字，也是上面介绍到的语法，没介绍到的自己理解吧，或者给我留言&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在谓词中使用占位符参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;%K：用于动态传入属性名&lt;/p&gt;

&lt;p&gt;%@：用于动态设置属性值&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;例：最后来一个综合的本地搜索吧，对自定义对象进行筛选&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//自定义对象
@interface YContactObject : NSObject
/**
 *  联系人的姓名对象
 */
@property (nonatomic, strong)YContactNameObject * nameObject;
@end

//姓名对象
@interface YContactNameObject : NSObject
/**
 *  姓名
 */
@property (nonatomic, copy)NSString * name;
/**
 *  昵称
 */
@property (nonatomic, copy) NSString * nickName;
/**
 *  名字
 */
@property (nonatomic, copy) NSString * givenName;

-(NSString *)getName
{
    //除nil处理
    self.middleName = (self.middleName) ? self.middleName : @&quot;&quot;;
    self.givenName = (self.givenName) ? self.givenName : @&quot;&quot;;
    self.familyName = (self.familyName) ? self.familyName : @&quot;&quot;;

    self.name = [[self.familyName stringByAppendingString:self.middleName] stringByAppendingString:self.givenName];

    return self.name;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//通讯录数组
self.sourceContactObjects:[YContactObject] = [**********]
self.contactObjects:[YContactObject] = []
//姓名过滤谓词
let predicateString:String = String.init(format: &quot;(SELF.nameObject.getName CONTAINS '%@') OR ((SELF.phoneObject != NIL) AND (SELF.getFirstPhone CONTAINS '%@'))&quot;, searchText,searchText)
let filterPredicate:NSPredicate = NSPredicate.init(format: predicateString)
self.contactObjects = (sourceContactObjects as NSArray).filtered(using: filterPredicate) as! [YContactObject]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行结果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2007491-d7ab80c54deffbd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Simulator Screen Shot 2017年9月11日 下午5.17.43.png&quot; /&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2007491-ff5a81fd05ff917a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Simulator Screen Shot 2017年9月11日 下午5.17.50.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后续有什么问题或者建议，请给我留言&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://ucself.cn/2017/09/iOS-NSPredicate-%E8%B0%93%E8%AF%8D-%E8%AF%AD%E6%B3%95/</link>
        <guid isPermaLink="true">https://ucself.cn/2017/09/iOS-NSPredicate-%E8%B0%93%E8%AF%8D-%E8%AF%AD%E6%B3%95/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
      <item>
        <title>Git 2、基础</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;       在工作使用到很多常用工具，遇到问题百度/谷歌一下就知道怎么使用，日积月累了很多知识点和使用技能，但是没有整理成专题的知识体系，为了方便以后遇到问题或者空闲阅读的时候当字典查阅。就从这篇开始对 Git 知识体系进行连载。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://progit.bootcss.com&quot; title=&quot;阅读来自Pro Git&quot;&gt;阅读来自 Pro Git&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-基础&quot;&gt;Git 基础&lt;/h2&gt;

&lt;p&gt;       在学习完本章之后，你应该能够配置并初始化一个仓库（repository）、开始或停止跟踪（track）文件、暂存（stage）或提交（commit)更改。 本章也将向你演示如何配置 Git 来忽略指定的文件和文件模式、如何迅速而简单地撤销错误操作、如何浏览你的项目的历史版本以及不同提交（commits）间的差异、如何向你的远程仓库推送（push）以及如何从你的远程仓库拉取（pull）文件。&lt;/p&gt;

&lt;h3 id=&quot;获取-git-仓库&quot;&gt;获取 Git 仓库&lt;/h3&gt;

&lt;p&gt;       1、在现有目录中初始化仓库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       2、克隆现有的仓库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:Ucself/GitStudyRepository.git

git clone git@github.com:Ucself/GitStudyRepository.git  RepositoryAlias
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;记录每次更新到仓库&quot;&gt;记录每次更新到仓库&lt;/h3&gt;

&lt;p&gt;       1、文件的状态变化周期&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-11-10/git_lifecycle.jpg&quot; alt=&quot;生命周期&quot; title=&quot;生命周期&quot; /&gt;&lt;/p&gt;

&lt;p&gt;       2、检查当前文件状态&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       3、跟踪新文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       4、暂存已修改文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       5、状态简览&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status -s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       6、忽略文件&lt;/p&gt;

&lt;p&gt;       我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式，文件 .gitignore 的格式规范如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所有空行或者以 ＃ 开头的行都会被 Git 忽略。&lt;/li&gt;
  &lt;li&gt;可以使用标准的 glob 模式匹配。&lt;/li&gt;
  &lt;li&gt;匹配模式可以以（/）开头防止递归。&lt;/li&gt;
  &lt;li&gt;匹配模式可以以（/）结尾指定目录。&lt;/li&gt;
  &lt;li&gt;要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       7、查看已暂存和未暂存的修改&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status
git diff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       8、提交更新&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -m &quot;Story 182: Fix benchmarks for speed&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       9、提交更新，跳过使用暂存区域&lt;/p&gt;

&lt;p&gt;       给 git commit 加上 -a 选项&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -m &quot;Story 182: Fix benchmarks for speed&quot; -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       9、移除文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rm PROJECTS.md
rm 'PROJECTS.md'

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       9、移动文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git mv README.md README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;查看提交历史&quot;&gt;查看提交历史&lt;/h3&gt;

&lt;p&gt;       1、查看提交历史&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;git log 的常用选项&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;选项&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;按补丁格式显示每个更新之间的差异。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–stat&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示每次更新的文件修改统计信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–shortstat&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;只显示 –stat 中最后的行数修改添加移除统计。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–name-only&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;仅在提交信息后显示已修改的文件清单。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–name-status&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示新增、修改、删除的文件清单。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–abbrev-commit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–relative-date&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;使用较短的相对时间显示（比如，“2 weeks ago”）。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–graph&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;显示 ASCII 图形表示的分支合并历史。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–pretty&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;       2、限制输出长度&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log -(5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;限制 git log 输出的选项&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;选项&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-(n)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;仅显示最近的 n 条提交&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–since, –after&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;仅显示指定时间之后的提交。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–until, –before&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;仅显示指定时间之前的提交。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–author&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;仅显示指定作者相关的提交。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–committer&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;仅显示指定提交者相关的提交。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–grep&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;仅显示含指定关键字的提交&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-S&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;仅显示添加或移除了某个关键字的提交&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;撤消操作&quot;&gt;撤消操作&lt;/h3&gt;

&lt;p&gt;       1、你提交后发现忘记了暂存某些需要的修改&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最终你只会有一个提交 - 第二次提交将代替第一次提交的结果。&lt;/p&gt;

&lt;p&gt;       2、取消暂存的文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git reset HEAD CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       3、撤消对文件的修改&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -- CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;远程仓库的使用&quot;&gt;远程仓库的使用&lt;/h3&gt;

&lt;p&gt;       1、查看远程仓库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       2、添加远程仓库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add pb https://github.com/paulboone/ticgit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       3、从远程仓库中抓取与拉取&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git fetch [remote-name]
git pull [remote-name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       4、推送到远程仓库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push [remote-name] [branch-name]
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       5、查看远程仓库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote show [remote-name]
git remote show origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       6、远程仓库的移除与重命名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote rename pb paul
git remote rm paul
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;打标签&quot;&gt;打标签&lt;/h3&gt;

&lt;p&gt;       1、列出标签&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       2、创建标签&lt;/p&gt;

&lt;p&gt;附注标签&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag -a v1.4 -m 'my version 1.4'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;轻量标签&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag v1.4-lw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       3、后期打标签&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag -a v1.2 9fceb02
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       4、共享标签&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin v1.5
git push origin --tags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       5、检出标签&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -b [branchname] [tagname]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;git-别名&quot;&gt;Git 别名&lt;/h3&gt;

&lt;p&gt;       1、添加别名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;       2、移除别名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global --unset alias.acp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 10 Nov 2016 00:00:00 +0800</pubDate>
        <link>https://ucself.cn/2016/11/Git-2-%E5%9F%BA%E7%A1%80/</link>
        <guid isPermaLink="true">https://ucself.cn/2016/11/Git-2-%E5%9F%BA%E7%A1%80/</guid>
        
        <category>git</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Git 1、起步</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;       在工作使用到很多常用工具，遇到问题百度/谷歌一下就知道怎么使用，日积月累了很多知识点和使用技能，但是没有整理成专题的知识体系，为了方便以后遇到问题或者空闲阅读的时候当字典查阅。就从这篇开始对 Git 知识体系进行连载。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://progit.bootcss.com&quot; title=&quot;阅读来自Pro Git&quot;&gt;阅读来自 Pro Git&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-起步&quot;&gt;Git 起步&lt;/h2&gt;

&lt;p&gt;       什么是“版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分布式版本控制系统&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-11-05/git_system.jpg&quot; alt=&quot;分布式版本控制系统&quot; title=&quot;分布式版本控制系统&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;直接记录快照，而非差异比较&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 快照流。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-11-05/git_storage.jpg&quot; alt=&quot;直接记录快照&quot; title=&quot;直接记录快照&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;近乎所有操作都是本地执行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       Git 在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。因为你在本地磁盘上就有项目的完整历史，所以大部分操作看起来瞬间完成。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Git 一般只添加数据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       你执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Git 三种状态&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Git 仓库目录： Git 用来保存项目的元数据和对象数据库的地方。&lt;/li&gt;
      &lt;li&gt;工作目录：对项目的某个版本独立提取出来的内容。&lt;/li&gt;
      &lt;li&gt;暂存区域：是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-11-05/git_state.jpg&quot; alt=&quot;直接记录快照&quot; title=&quot;直接记录快照&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Nov 2016 00:00:00 +0800</pubDate>
        <link>https://ucself.cn/2016/11/Git-1-%E8%B5%B7%E6%AD%A5/</link>
        <guid isPermaLink="true">https://ucself.cn/2016/11/Git-1-%E8%B5%B7%E6%AD%A5/</guid>
        
        <category>git</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>iOS Objective-C与Swift闭包（block）写法</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;       在项目开发中经常会去查 iOS 闭包怎么写，因为它的语法太古怪，两种语言写法不一，经常搞混，干脆记录下常用的写法算了&lt;/p&gt;

&lt;h2 id=&quot;闭包&quot;&gt;闭包&lt;/h2&gt;

&lt;p&gt;       闭包是指可以包含自由（未绑定到特定对象）变量的代码块；这些变量不是在这个代码块内或者任何全局上下文中定义的，而是在定义代码块的环境中定义（局部变量）。&lt;/p&gt;

&lt;p&gt;       “闭包” 一词来源于以下两者的结合：要执行的代码块（由于自由变量被包含在代码块中，这些自由变量以及它们引用的对象没有被释放）和为自由变量提供绑定的计算环境（作用域）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;声明闭包（block）&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objective-C&quot;&gt;typedef NSString *(^blockType)(NSString *parameter1, NSString *parameter2);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;typealias blockType = (_ parameter1:String, parameter2:String ) -&amp;gt; Void
var objectBlock:blockType?
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;定义闭包（block）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 第一种方式 使用声明
@property (nonatomic,strong) blockType *objectBlock;

_objectBlock = ^(NSString *parameter1,NSString *parameter2){
    return parameter1;
};
// 第二种方式 不使用声明
@property (nonatomic,strong) NSString *(^objectBlock)(NSString *parameter1, NSString *parameter2);

_objectBlock = ^(NSString *parameter1,NSString *parameter2){
    return parameter1;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let blockCallbackName:String = {(parameter1:String, parameter2:String) -&amp;gt;String in
    return parameter1
}(&quot;parameter1&quot;,&quot;parameter2&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;函数定义闭包（block）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)functionUseBlock:(NSString* (^)(NSString *parameter1, NSString *parameter2))callBackOne callBackTwo:(blockCallbackType)callBackTwo{
    if (callBackOne) {
        callBackOne(@&quot;parameter1&quot;,@&quot;parameter2&quot;);
    }
    if (callBackTwo) {
        callBackTwo(@&quot;parameter1&quot;,@&quot;parameter2&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func functionUseBlock(callBack:(String,String) -&amp;gt;String) -&amp;gt; Void  {
    print(callBack(&quot;parameter1&quot;,&quot;parameter2&quot;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;调用函数闭包（block）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[self functionUseBlock:^NSString *(NSString *parameter1, NSString *parameter2) {
    return parameter1;
} callBackTwo:^NSString *(NSString *parameter1, NSString *parameter2) {
    return parameter1;
}];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.functionUseBlock = { (parameter1, parameter2) -&amp;gt; String in
    return parameter2
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;结尾&quot;&gt;结尾&lt;/h2&gt;

&lt;p&gt;Swift 版本根据参数和返回值有很多缩写方式，这里就不一一写上了。&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Nov 2016 00:00:00 +0800</pubDate>
        <link>https://ucself.cn/2016/11/iOS-Objective-C%E4%B8%8ESwift%E9%97%AD%E5%8C%85-block-%E5%86%99%E6%B3%95/</link>
        <guid isPermaLink="true">https://ucself.cn/2016/11/iOS-Objective-C%E4%B8%8ESwift%E9%97%AD%E5%8C%85-block-%E5%86%99%E6%B3%95/</guid>
        
        <category>archive</category>
        
        
        <category>archive</category>
        
      </item>
    
  </channel>
</rss>
